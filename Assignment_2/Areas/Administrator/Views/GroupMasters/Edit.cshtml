@model Assignment_2.GroupMaster

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutOperation.cshtml";
}
<div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
    <h2>Edit Group</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <hr />

            @if (!string.IsNullOrEmpty(ViewBag.Error))
            {
                <div class="alert alert-danger">
                    <strong>Error!</strong> Group not Created! Please try again letter.
                </div>
            }

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.GroupName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.GroupName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.GroupName, "", new { @class = "text-danger" })
                </div>
            </div>



            @*<div class="form-group">
                    @Html.LabelFor(model => model.CourseID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CourseID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CourseID, "", new { @class = "text-danger" })
                    </div>
                </div>*@



            <div class="form-group">
                @Html.LabelFor(model => model.IsEnable, "Enable", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsEnable,new { @class= "dropdown" })
                        @Html.ValidationMessageFor(model => model.IsEnable, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>



            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>